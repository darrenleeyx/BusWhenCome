@page "/"
@using BusWhenCome.Client.Services.BusStops
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable
@inject IBusArrivalService BusArrivalService
@inject IBusStopService BusStopService
@inject NavigationManager Navigation

<article class="bus-arrival-page">
    <header class="app-header">
        <h1>🚌 BusWhenCome</h1>
    </header>

    <section class="search-panel">
        <form @onsubmit="FetchBusDataAsync">
            <input class="input"
            @bind="_busStopId"
            @bind:event="oninput"
            placeholder="Enter Bus Stop ID" />
            <button type="submit" class="btn" disabled="@string.IsNullOrWhiteSpace(_busStopId)">Fetch</button>
        </form>

        @if (!string.IsNullOrWhiteSpace(_busStopName))
        {
            <h2 class="stop-title">📍 @_busStopName</h2>
        }
    </section>

    @if (_busArrivals?.Services?.Any() == true)
    {
        @if (_timer is not null || _lastUpdated.HasValue)
        {
            <div class="status-bar">
                <span>Next refresh in: @_countdown seconds</span>
                @if (_lastUpdated.HasValue)
                {
                    <span class="last-updated">Last updated: @_lastUpdated.Value.ToString("HH:mm:ss")</span>
                }
            </div>
        }

        <section class="arrival-table">
            <table>
                <thead>
                    <tr>
                        <th>Bus #</th>
                        <th>Arrival</th>
                        <th>Next</th>
                        <th>Later</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var service in _busArrivals.Services)
                    {
                        <tr>
                            <td>@service.Number</td>
                            <td>@FormatArrivalTime(service.Next?.DurationMs)</td>
                            <td>@FormatArrivalTime(service.Next2?.DurationMs)</td>
                            <td>@FormatArrivalTime(service.Next3?.DurationMs)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    }
    else if (_hasFetchError)
    {
        <p class="no-results">No arrival data found for this bus stop.</p>
    }
    else
    {
        <p class="no-results">No bus stop ID was provided.</p>
    }
</article>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "stop-id")]
    public string? StopId { get; set; }

    private string _busStopIdValue = string.Empty;
    private string _busStopId
    {
        get => _busStopIdValue;
        set
        {
            _busStopIdValue = value;

            if (string.IsNullOrWhiteSpace(value))
            {
                ResetData();
            }
        }
    }

    private string? _busStopName;
    private BusArrivalResponse? _busArrivals;
    private Timer? _timer;
    private int _defaultCountdown = 30;
    private int _countdown;
    private bool _hasFetchError = false;
    private DateTime? _lastUpdated;
    private bool _hasInitializedFromQuery = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasInitializedFromQuery)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

            if (QueryHelpers.ParseQuery(uri.Query)
                .TryGetValue("stop-id", out var stopIdFromQuery))
            {
                _busStopId = stopIdFromQuery!;
                await FetchArrivalsAsync();
                StartRefreshTimer(FetchArrivalsAsync);
            }

            _hasInitializedFromQuery = true;
        }
    }

    private async Task FetchBusDataAsync()
    {
        _busStopId = _busStopId?.Trim() ?? string.Empty;

        if (!string.IsNullOrEmpty(_busStopId))
        {
            var uri = new Uri(Navigation.Uri);
            var baseUri = uri.GetLeftPart(UriPartial.Path);
            Navigation.NavigateTo($"{baseUri}?stop-id={_busStopId}", forceLoad: false);

            await FetchArrivalsAsync();

            StartRefreshTimer(FetchArrivalsAsync);
        }
    }

    private void StartRefreshTimer(Func<Task> onTick)
    {
        _timer?.Dispose();
        _countdown = _defaultCountdown + 1;

        _timer = new Timer(async _ =>
        {
            if (_countdown == 0)
            {
                await InvokeAsync(onTick);
                _countdown = _defaultCountdown;
                await InvokeAsync(StateHasChanged);
            }
            else if (_countdown > 0)
            {
                _countdown--;
                await InvokeAsync(StateHasChanged);
            }

        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task FetchArrivalsAsync()
    {
        _hasFetchError = false;

        if (string.IsNullOrWhiteSpace(_busStopId))
        {
            _busArrivals = null;
            return;
        }

        var busStop = await BusStopService.GetBusStop(_busStopId);

        if (busStop is null)
        {
            _hasFetchError = true;
            _busArrivals = null;
            _busStopName = null;
            _lastUpdated = null;
            return;
        }

        _busStopName = $"{busStop.Description} ({busStop.BusStopId})";
        _busArrivals = await BusArrivalService.GetBusArrivalsAsync(_busStopId);
        _lastUpdated = DateTime.Now;
        StateHasChanged();
    }

    private void ResetData()
    {
        _busArrivals = null;
        _busStopName = null;
        _hasFetchError = false;
        _timer?.Dispose();
        _timer = null;
        _countdown = 0;
        _lastUpdated = null;
    }

    private string FormatArrivalTime(double? durationMs)
    {
        if (durationMs is null)
            return "-";

        var minutes = durationMs.Value / 60000;

        return minutes < 1 ? "ARR" : $"{Math.Round(minutes)} min";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
